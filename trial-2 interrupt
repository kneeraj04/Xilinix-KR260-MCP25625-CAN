CODE Structure 

 

#include <stdio.h> 

#include "xspips.h" 

#include "xparameters.h" 

#include "string.h"  // For memset 

#include "platform.h" 

#include "xgpiops.h" 

  

// SPI Commands 

#define GPIO_DEVICE_ID  XPAR_PSU_GPIO_0_DEVICE_ID 

#define SPI_EMIO XPAR_XSPIPS_0_DEVICE_ID 

#define PIN_D20_RESET 78 

  

#define WRITE_CMD     0x02 

#define READ_CMD      0x03 

#define MODIFY_CMD    0x05 

#define RESET_CMD     0xC0 

#define RTS_CMD_TXB0  0x81 

#define READ_STATUS   0xA0 

  

// MCP25625 Register Addresses 

#define CANCTRL       0x0F 

#define CNF1          0x2A 

#define CNF2          0x29 

#define CNF3          0x28 

#define TXB0CTRL      0x30 

#define TXB0DLC       0x35 

#define TXB0D0        0x36 

#define CANINTE       0x2B 

#define RXB0CTRL      0x60 

#define CANINTF       0x2C 

#define RXB0D0        0x66 

#define RXB0DLC       0x65 

  

// SPI-GPIO Instance 

XGpioPs GpioPs; 

XSpiPs SpiInstance; 

  

// Function Prototypes 

uint8_t MCP_Reset(); 

void Configure_CAN_BitTiming(); 

void Setup_CAN_Filters(); 

void Set_CAN_Mode(uint8_t mode); 

uint8_t Transmit_CAN_Message(uint8_t *data, uint8_t length); 

uint8_t MCP_WriteRegister(uint8_t reg_addr, uint8_t value); 

uint8_t MCP_ModifyRegister(uint8_t reg_addr, uint8_t mask, uint8_t value); 

uint8_t MCP_ReadRegister(uint8_t reg_addr); 

uint8_t Receive_CAN_Message(uint8_t *buffer); 

uint8_t Read_CAN_status(); 

  

int main() { 

    XSpiPs_Config *SpiConfig; 

    XGpioPs_Config *ConfigPtr; 

  

    // Initialize the platform 

    init_platform(); 

  

    // Initialize GPIO for Reset Pin 

    ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID); 

    XGpioPs_CfgInitialize(&GpioPs, ConfigPtr, ConfigPtr->BaseAddr); 

    XGpioPs_SetDirectionPin(&GpioPs, PIN_D20_RESET, 1); 

  

    // Initialize SPI Interface 

    SpiConfig = XSpiPs_LookupConfig((u16)SPI_EMIO); 

    XSpiPs_CfgInitialize(&SpiInstance, SpiConfig, SpiConfig->BaseAddress); 

    XSpiPs_SetOptions(&SpiInstance, XSPIPS_MASTER_OPTION | XSPIPS_FORCE_SSELECT_OPTION); 

    XSpiPs_SetClkPrescaler(&SpiInstance, XSPIPS_CLK_PRESCALE_256); 

    XSpiPs_SetSlaveSelect(&SpiInstance, 0); 

  

    // Reset MCP25625 

    MCP_Reset(); 

  

    // Configure CAN Bit Timing for 250 kbps 

    Configure_CAN_BitTiming(); 

  

    // Setup Filters and Clear Buffers 

    Setup_CAN_Filters(); 

  

    // Set MCP25625 to Normal Mode 

    Set_CAN_Mode(0x00); 

  

    // Transmit Example CAN Message 

    uint8_t tx_data[] = {0x44, 0x33, 0x22, 0x11}; // Example message 

    uint8_t rx_buffer[8] = {0}; 

  

    while (1) { 

        // Transmit CAN Message 

        Transmit_CAN_Message(tx_data, sizeof(tx_data)); 

  

        // Receive CAN Message 

        if (Receive_CAN_Message(rx_buffer)) { 

            xil_printf("Received Message: "); 

            for (int i = 0; i < 8; i++) { 

                xil_printf("%02X ", rx_buffer[i]); 

            } 

            xil_printf("\n"); 

        } 

  

        uint8_t status = Read_CAN_status(); 

        xil_printf("CAN Status: 0x%02X\n", status); 

  

        for (int delay = 0; delay < 100; delay++); // Delay for demonstration 

    } 

  

    return 0; 

} 

  

// Function Definitions 

uint8_t MCP_Reset() { 

    XGpioPs_WritePin(&GpioPs, PIN_D20_RESET, 0); // Set Reset Low 

    xil_printf("Setting Reset LOW\n"); 

    for (int delay = 0; delay < 10000; delay++); 

    XGpioPs_WritePin(&GpioPs, PIN_D20_RESET, 1); // Set Reset High 

    xil_printf("Setting Reset HIGH\n"); 

    for (int delay = 0; delay < 10000; delay++); 

    return 1; 

} 

  

uint8_t MCP_WriteRegister(uint8_t reg_addr, uint8_t value) { 

    uint8_t buffer[3]; 

    memset(buffer, 0, sizeof(buffer)); // Initialize buffer to 0 

    buffer[0] = WRITE_CMD; 

    buffer[1] = reg_addr; 

    buffer[2] = value; 

    return XSpiPs_PolledTransfer(&SpiInstance, buffer, NULL, 3); 

} 

  

uint8_t MCP_ModifyRegister(uint8_t reg_addr, uint8_t mask, uint8_t value) { 

    uint8_t buffer[4]; 

    memset(buffer, 0, sizeof(buffer)); // Initialize buffer to 0 

    buffer[0] = MODIFY_CMD; 

    buffer[1] = reg_addr; 

    buffer[2] = mask; 

    buffer[3] = value; 

    return XSpiPs_PolledTransfer(&SpiInstance, buffer, NULL, 4); 

} 

  

uint8_t MCP_ReadRegister(uint8_t reg_addr) { 

    uint8_t buffer[2]; 

    uint8_t rx_buffer[2]; 

    memset(buffer, 0, sizeof(buffer)); // Initialize buffers to 0 

    memset(rx_buffer, 0, sizeof(rx_buffer)); 

    buffer[0] = READ_CMD; 

    buffer[1] = reg_addr; 

    XSpiPs_PolledTransfer(&SpiInstance, buffer, rx_buffer, 2); 

    return rx_buffer[1]; // Read value is the second byte 

} 

  

void Configure_CAN_BitTiming() { 

    MCP_WriteRegister(CNF1, 0x41); // Set CNF1 for 250 kbps 

    MCP_WriteRegister(CNF2, 0xFB); // Set CNF2 

    MCP_WriteRegister(CNF3, 0x86); // Set CNF3 

} 

  

void Setup_CAN_Filters() { 

    for (uint8_t addr = 0x00; addr <= 0x5D; addr++) { 

        MCP_WriteRegister(addr, 0x00); 

    } 

} 

  

void Set_CAN_Mode(uint8_t mode) { 

    MCP_ModifyRegister(CANCTRL, 0xFF, mode << 5); // Set mode bits 

    uint8_t current_mode = MCP_ReadRegister(CANCTRL) & 0xE0; 

    xil_printf("Current mode: 0x%02X\n", current_mode); 

} 

  

uint8_t Transmit_CAN_Message(uint8_t *tx_data, uint8_t length) { 

  

// Step 1: Disable TX interrupt 

    MCP_ModifyRegister(CANINTE, 0x04, 0x00); // Clear TXIE (disable interrupt) 

  

    // Step 2: Load data into TXB0Dn 

       MCP_WriteRegister(TXB0DLC, length); // Set DLC 

  

       for (uint8_t i = 0; i < length; i++) { 

               MCP_WriteRegister(TXB0D0 + i, tx_data[i]); // Write data bytes 

           } 

  

    // Step 3: Set TXREQ in TXB0CTRL 

           MCP_ModifyRegister(TXB0CTRL, 0x08, 0x08); // Request transmission (set TXREQ) 

  

    // Send RTS command to initiate transmission 

  

    uint8_t rts_cmd = RTS_CMD_TXB0; 

  

    return XSpiPs_PolledTransfer(&SpiInstance, &rts_cmd, NULL, 1); // Request to Send TXB0 

} 

  

uint8_t Receive_CAN_Message(uint8_t *rx_buffer) { 

  

    uint8_t status = MCP_ReadRegister(CANINTF); 

  

    if (status & 0x01) { // RX0IF is set 

        for (uint8_t i = 0; i < 8; i++) { 

            rx_buffer[i] = MCP_ReadRegister(RXB0D0 + i); 

        } 

  

        MCP_WriteRegister(CANINTF, 0x01); // Clear RX0IF 

        return 1; 

    } 

    return 0; // No message 

} 

  

uint8_t Read_CAN_status() { 

    uint8_t buffer[2]; 

    uint8_t status; 

    memset(buffer, 0, sizeof(buffer)); // Initialize buffer 

    memset(&status, 0, sizeof(status)); // Initialize status 

    buffer[0] = READ_STATUS; 

    XSpiPs_PolledTransfer(&SpiInstance, buffer, &status, 2); 

    return status; 

} 

 
