
#include <stdio.h>
#include "xspips.h"
#include "xparameters.h"
#include "string.h"  // For memset
#include "platform.h"
#include "xgpiops.h"
#include "xscugic.h"
#include "xil_exception.h"
#include "xparameters_ps.h"

// SPI Commands

#define GPIO_DEVICE_ID  XPAR_PSU_GPIO_0_DEVICE_ID

#define SPI_EMIO XPAR_XSPIPS_0_DEVICE_ID

#define INTC_DEVICE_ID  XPAR_SCUGIC_SINGLE_DEVICE_ID //VERIFIED

#define SPI_INTR_ID XPAR_XSPIPS_0_INTR //VERIFIED


#define PIN_D20_RESET 78

#define WRITE_CMD     0x02
#define READ_CMD      0x03
#define MODIFY_CMD    0x05
#define RESET_CMD     0xC0
#define RTS_CMD_TXB0  0x81

// MCP25625 Register Addresses
#define CANSTAT       0x0E
#define CNF1          0x2A
#define CNF2          0x29
#define CNF3          0x28

#define TXB0CTRL      0x30
#define TXB0DLC       0x35
#define TXB0D0        0x36
#define CANINTE       0x2B

// SPI Instance

XGpioPs GpioPs;
XSpiPs SpiInstance;
XScuGic InterruptController;
// Function Prototypes

int status;

int TransferInProgress;

int SetupInterruptSystem(XScuGic *InterruptController, XSpiPs *SpiInstance, u16 Spi0IntrId);

void IntrHandler(void *CallBackRef, u32 StatusEvent, unsigned int ByteCount);
// Function Prototypes
uint8_t MCP_Reset();
void Configure_CAN_BitTiming();
void Setup_CAN_Filters();

void Set_CAN_Mode(uint8_t mode);

uint8_t Transmit_CAN_Message(uint8_t *data, uint8_t length);
uint8_t MCP_WriteRegister(uint8_t reg_addr, uint8_t value);
uint8_t MCP_ModifyRegister(uint8_t reg_addr, uint8_t mask, uint8_t value);
uint8_t MCP_ReadRegister(uint8_t reg_addr);

int main() {

    XSpiPs_Config *SpiConfig;
    XGpioPs_Config *ConfigPtr;

    // Initialize the SPI interface
    init_platform();

    ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
    XGpioPs_CfgInitialize(&GpioPs, ConfigPtr, ConfigPtr->BaseAddr);
    XGpioPs_SetDirectionPin(&GpioPs,PIN_D20_RESET,1) ;


    SpiConfig = XSpiPs_LookupConfig((u16)SPI_EMIO);
    XSpiPs_CfgInitialize(&SpiInstance, SpiConfig, SpiConfig->BaseAddress);
    XSpiPs_SelfTest(&SpiInstance);
    SetupInterruptSystem(&InterruptController, &SpiInstance, SPI_INTR_ID);

      /*

      	 * Setup the handler for the SPI that will be called from the

      	 * interrupt context when an SPI status occurs, specify a pointer to

      	 * the SPI driver instance as the callback reference so the handler is

      	 * able to access the instance data

      	 */


     //XSpiPs_InterruptHandler(&SpiInstance);


     XSpiPs_SetStatusHandler(&SpiInstance, &SpiInstance, (XSpiPs_StatusHandler)IntrHandler); //Doubt
     XSpiPs_SetOptions(&SpiInstance,XSPIPS_MASTER_OPTION | XSPIPS_FORCE_SSELECT_OPTION);
     XSpiPs_SetClkPrescaler(&SpiInstance, XSPIPS_CLK_PRESCALE_256);

      XSpiPs_Enable(&SpiInstance);
      XSpiPs_SetSlaveSelect(&SpiInstance, 0);

        // Reset MCP25625

       MCP_Reset();

       int8_t current_mode = MCP_ReadRegister(CANSTAT);

           if (current_mode == 0x00) {
               xil_printf("Successfully entered mode: 0x%02X\n", current_mode);
           } else {
               xil_printf("Failed to enter mode: 0x%02X. Current mode: 0x%02X\n", current_mode);
           }
       // Configure CAN Bit Timing for 250 kbps
       Configure_CAN_BitTiming();

       // Setup Filters and Clear Buffers
       Setup_CAN_Filters();

       // Set MCP25625 to Normal Mode
       Set_CAN_Mode(0x06);

    // Transmit Example CAN Message

    uint8_t tx_data[] = {0x11, 0x22, 0x33, 0x44}; // Example message

    while (1) {

    	Transmit_CAN_Message(tx_data, sizeof(tx_data));

        for (int delay = 0; delay < 10000000; delay++); // Simple delay
    }

    return 0;
}

// Function Definitions

uint8_t MCP_Reset() {

	XGpioPs_WritePin(&GpioPs, PIN_D20_RESET,0);  // Set Reset high

	xil_printf("Setting Reset HIGH\n");

	 for (int delay = 0; delay < 100; delay++);

	 XGpioPs_WritePin(&GpioPs,PIN_D20_RESET,1);              // Set Reset low

	 xil_printf("Setting Reset LOW\n");

	 for( int delay = 0; delay < 100; delay++);//wait
	 return 1;

}

uint8_t MCP_WriteRegister(uint8_t reg_addr, uint8_t value) {
    uint8_t buffer[3];
    memset(buffer, 0, sizeof(buffer));  // Initialize buffer to 0
    buffer[0] = WRITE_CMD;
    buffer[1] = reg_addr;
    buffer[2] = value;
    status = XSpiPs_Transfer(&SpiInstance, buffer, NULL, 3);
    if (status != XST_SUCCESS) {
            return XST_FAILURE;
      	}
       return status;
}

uint8_t MCP_ModifyRegister(uint8_t reg_addr, uint8_t mask, uint8_t value) {
    uint8_t buffer[4];
    uint8_t rx_buffer[4];
    memset(buffer, 0, sizeof(buffer));  // Initialize buffer to 0
    memset(rx_buffer, 0, sizeof(rx_buffer));  // Initialize buffer to 0
    buffer[0] = MODIFY_CMD;
    buffer[1] = reg_addr;
    buffer[2] = mask;
    buffer[3] = value;
    int status = XSpiPs_Transfer(&SpiInstance, buffer, NULL, 4);
    xil_printf("Sent: 0x%02X 0x%02X 0x%02X 0x%02X\n", MODIFY_CMD, reg_addr, mask, value);

    if (status != XST_SUCCESS) {
            		return XST_FAILURE;
            	}
    return status;
}

uint8_t MCP_ReadRegister(uint8_t reg_addr) {
    uint8_t buffer[2];
    uint8_t rx_buffer[2];
    memset(buffer, 0, sizeof(buffer));  // Initialize response buffer to 0
    memset(rx_buffer, 0, sizeof(rx_buffer));  // Initialize response buffer to 0
    buffer[0] = READ_CMD;
    buffer[1] = reg_addr;

    int status = XSpiPs_Transfer(&SpiInstance, buffer, rx_buffer, 2);

    if (status != XST_SUCCESS) {
              		return XST_FAILURE;
              	}
    return rx_buffer[0]; // Return the read value
}

void Configure_CAN_BitTiming() {
    MCP_WriteRegister(CNF1, 0x41); // Set CNF1 for 250 kbps
    MCP_WriteRegister(CNF2, 0xFB); // Set CNF2
    MCP_WriteRegister(CNF3, 0x86); // Set CNF3
}

void Setup_CAN_Filters() {

    for (uint8_t addr = 0x00; addr <= 0x0B; addr++) { //Accept Filters enabled: 00

              MCP_WriteRegister(addr, 0x00);

          }

    for (uint8_t addr = 0x10; addr <= 0x1B; addr++) {

              MCP_WriteRegister(addr, 0x00);

          }

    for (uint8_t addr = 0x20; addr <= 0x27; addr++) {//Accept Masks enabled: 00

              MCP_WriteRegister(addr, 0x00);

          }

    for (uint8_t addr = 0x30; addr <= 0x3D; addr++) {

            MCP_WriteRegister(addr, 0x00);

          }

    for (uint8_t addr = 0x40; addr <= 0x4D; addr++) {

              MCP_WriteRegister(addr, 0x00);

          }

    for (uint8_t addr = 0x50; addr <= 0x5D; addr++) {

              MCP_WriteRegister(addr, 0x00);

          }

}


void Set_CAN_Mode(uint8_t mode) {

	MCP_ModifyRegister(CANSTAT, 0xFF, mode);

    uint8_t current_mode = MCP_ReadRegister(CANSTAT);

    if (current_mode == 0x00) {
        xil_printf("Successfully entered mode: 0x%02X\n", current_mode);
    } else {
        xil_printf("Failed to enter mode: 0x%02X. Current mode: 0x%02X\n", current_mode);
    }


}

uint8_t Transmit_CAN_Message(uint8_t *tx_data, uint8_t length) {

	// Step 1: Disable TX interrupt
	    MCP_ModifyRegister(CANINTE, 0x04, 0x00); // Clear TXIE (disable interrupt)

	    // Step 2: Load data into TXB0Dn
	       MCP_WriteRegister(TXB0DLC, length); // Set DLC

	       for (uint8_t i = 0; i < length; i++) {
	               MCP_WriteRegister(TXB0D0 + i, tx_data[i]); // Write data bytes
	           }

	    // Step 3: Set TXREQ in TXB0CTRL
	           MCP_ModifyRegister(TXB0CTRL, 0x08, 0x08); // Request transmission (set TXREQ)

    // Send RTS command to initiate transmission

    uint8_t rts_cmd = RTS_CMD_TXB0;

    return XSpiPs_Transfer(&SpiInstance, &rts_cmd, NULL, 1); // Request to Send TXB0

}
//Intialize interrupt controller and connect SPI Interrupt to GIC.



int SetupInterruptSystem(XScuGic *InterruptController, XSpiPs *SpiInstance, u16 Spi0IntrId) {


    XScuGic_Config *IntcConfig;
    Xil_ExceptionInit();

    // Initialize Interrupt Controller

    IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);

    int status = XScuGic_CfgInitialize(InterruptController, IntcConfig, IntcConfig->CpuBaseAddress);

    if (status != XST_SUCCESS) {

        xil_printf("Interrupt Controller Initialization Failed\n");

        return XST_FAILURE;

    }

    		/*

    		 * Connect the interrupt controller interrupt handler to the hardware

    		 * interrupt handling logic in the processor.

    		 */

    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,

    					(Xil_ExceptionHandler)XScuGic_InterruptHandler,

						InterruptController);

    		/*

    		 * Connect the device driver handler that will be called when an

    		 * interrupt for the device occurs, the handler defined above performs

    		 * the specific interrupt processing for the device.

    		 */

    status = XScuGic_Connect(InterruptController, Spi0IntrId,

        (Xil_ExceptionHandler)XSpiPs_InterruptHandler, (void *)SpiInstance);

    if (status != XST_SUCCESS) {

        xil_printf("Failed to connect SPI interrupt. Status: %d\n", status);

        return XST_FAILURE;

    }


    // Enable SPI Interrupt

    XScuGic_Enable(InterruptController, Spi0IntrId);


    // Enable interrupts in processor

    Xil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);


    xil_printf("Interrupt system configured.\n");

    return XST_SUCCESS;

}

void IntrHandler(void *CallBackRef, u32 StatusEvent, unsigned int ByteCount) { //Doubt


    // Indicate the transfer on the SPI bus is no longer in progress

    TransferInProgress = FALSE;

    // Check if the SPI transfer was completed successfully

    if (StatusEvent == XST_SPI_TRANSFER_DONE) {

        xil_printf("SPI Transfer Completed. Bytes Transferred: %d\n", ByteCount);

    }

}
